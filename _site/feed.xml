<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-06-16T10:09:03+02:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Functional programming with VBA</title><subtitle>My description.</subtitle><entry><title type="html">What can be cons() in vba ?</title><link href="http://localhost:4000/2023/06/12/what-can-be-cons-in-vba.html" rel="alternate" type="text/html" title="What can be cons() in vba ?" /><published>2023-06-12T02:00:00+02:00</published><updated>2023-06-12T02:00:00+02:00</updated><id>http://localhost:4000/2023/06/12/what-can-be-cons-in-vba</id><content type="html" xml:base="http://localhost:4000/2023/06/12/what-can-be-cons-in-vba.html"><![CDATA[<p>The last tool we need before solving our first problem with a recursive approach is <code class="language-plaintext highlighter-rouge">cons</code>. In functional programming, <code class="language-plaintext highlighter-rouge">cons</code> is a datastructure which holds one value and one reference to another cons datastructure. A cons is a pair (a-value, a-reference). This datastructure can be used to represent a list of items. See below an example.
<br /><br /></p>

<figure class="highlight"><pre><code class="language-cpp" data-lang="cpp"><span class="n">The</span> <span class="n">list</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]</span> <span class="n">can</span> <span class="n">be</span> <span class="n">constructed</span> <span class="n">as</span> <span class="n">cons</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">cons</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">empty</span><span class="p">))</span></code></pre></figure>

<p><br />
The advantage of using this datastructure when representing a list is that <code class="language-plaintext highlighter-rouge">head()</code> and <code class="language-plaintext highlighter-rouge">tail()</code> become trivial (respectively retrieving the first or the second elements). A basic approach to build a cons in vba will be to base it on vba arrays and create a function to add a value at a beginning of an existing array. By doing so, we will be able to reuse the implemented functions head() and tail() over the cons output. The function cons() takes two parameters, a value and an array, and returns an array. Here are some examples showing the function logic.
<br /><br /></p>

<figure class="highlight"><pre><code class="language-cpp" data-lang="cpp"><span class="n">cons</span> <span class="n">of</span> <span class="mi">1</span> <span class="n">and</span> <span class="n">array</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span> <span class="n">is</span> <span class="n">array</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>

<span class="n">cons</span> <span class="n">of</span> <span class="mi">0</span> <span class="n">and</span> <span class="n">array</span> <span class="p">[]</span> <span class="n">is</span> <span class="n">array</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span>

<span class="n">cons</span> <span class="n">of</span> <span class="s">"a"</span> <span class="n">and</span> <span class="n">array</span> <span class="p">[</span><span class="s">"b"</span><span class="p">,</span> <span class="mi">0</span><span class="p">]</span> <span class="n">is</span> <span class="n">array</span> <span class="p">[</span><span class="s">"a"</span><span class="p">,</span> <span class="s">"b"</span><span class="p">,</span> <span class="mi">0</span><span class="p">]</span></code></pre></figure>

<p><br />
See below the implementation of the function cons(). It is assumed that the caller will pass initialized and valid data for both of its parameters. This implementation is generic therefore can be used with any array types.
<br /><br /></p>

<figure class="highlight"><pre><code class="language-vb" data-lang="vb"><span class="k">Function</span> <span class="nf">cons</span><span class="p">(</span><span class="n">x</span> <span class="ow">As</span> <span class="kt">Variant</span><span class="p">,</span> <span class="n">xs</span> <span class="ow">As</span> <span class="kt">Variant</span><span class="p">)</span> <span class="ow">As</span> <span class="kt">Variant</span>

    <span class="k">Dim</span> <span class="nv">result</span><span class="p">()</span> <span class="ow">As</span> <span class="kt">Variant</span>
    <span class="k">ReDim</span> <span class="n">result</span><span class="p">(</span><span class="mi">1</span> <span class="o">+</span> <span class="n">UBound</span><span class="p">(</span><span class="n">xs</span><span class="p">))</span>

    <span class="n">result</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">=</span> <span class="n">x</span>
    <span class="k">Dim</span> <span class="nv">i</span> <span class="ow">As</span> <span class="kt">Long</span>
    <span class="k">For</span> <span class="n">i</span> <span class="o">=</span> <span class="n">LBound</span><span class="p">(</span><span class="n">xs</span><span class="p">)</span> <span class="k">To</span> <span class="n">UBound</span><span class="p">(</span><span class="n">xs</span><span class="p">)</span> <span class="k">Step</span> <span class="mi">1</span>
        <span class="n">result</span><span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">=</span> <span class="n">xs</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
    <span class="k">Next</span>
    <span class="n">cons</span> <span class="o">=</span> <span class="n">result</span>

<span class="k">End</span> <span class="k">Function</span></code></pre></figure>

<p><br />
How can this function be used in a vba code ?
<br /><br /></p>

<figure class="highlight"><pre><code class="language-vb" data-lang="vb"><span class="k">Sub</span> <span class="nf">main</span><span class="p">()</span>

    <span class="k">Dim</span> <span class="nv">r</span> <span class="ow">As</span> <span class="kt">Variant</span>

    <span class="n">r</span> <span class="o">=</span> <span class="n">cons</span><span class="p">(</span><span class="s">"a"</span><span class="p">,</span> <span class="n">Array</span><span class="p">())</span>
    <span class="c1">' r is the array ["a"]</span>

    <span class="n">r</span> <span class="o">=</span> <span class="n">cons</span><span class="p">(</span><span class="s">"a"</span><span class="p">,</span> <span class="n">Array</span><span class="p">(</span><span class="s">"b"</span><span class="p">,</span> <span class="s">"c"</span><span class="p">))</span>
    <span class="c1">' r is the array ["a", "b", "c"]</span>

    <span class="n">r</span> <span class="o">=</span> <span class="n">cons</span><span class="p">(</span><span class="s">"a"</span><span class="p">,</span> <span class="n">cons</span><span class="p">(</span><span class="s">"z"</span><span class="p">,</span> <span class="n">Array</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)))</span>
    <span class="c1">' r is the array ["a", "z", 1, 2, 3]</span>

<span class="k">End</span> <span class="k">Sub</span></code></pre></figure>

<p><br />
Thanks for reading. If you have any comments <a href="mailto:assad.navi@gmail.com">get in touch</a></p>]]></content><author><name></name></author><summary type="html"><![CDATA[The last tool we need before solving our first problem with a recursive approach is cons. In functional programming, cons is a datastructure which holds one value and one reference to another cons datastructure. A cons is a pair (a-value, a-reference). This datastructure can be used to represent a list of items. See below an example.]]></summary></entry><entry><title type="html">Function tail() over a vba array</title><link href="http://localhost:4000/2023/06/05/function-tail-over-a-vba-array.html" rel="alternate" type="text/html" title="Function tail() over a vba array" /><published>2023-06-05T02:00:00+02:00</published><updated>2023-06-05T02:00:00+02:00</updated><id>http://localhost:4000/2023/06/05/function-tail-over-a-vba-array</id><content type="html" xml:base="http://localhost:4000/2023/06/05/function-tail-over-a-vba-array.html"><![CDATA[<p>In this article, we will look at our second tool that will help us solve problems in a recursive programming style. The function is called <code class="language-plaintext highlighter-rouge">tail</code>. The function takes an array as a parameter and returns a copy of it without its first element. The order of the elements is preserved. The function tail is defined only for non-empty arrays. See examples of its logic.
<br /><br /></p>

<figure class="highlight"><pre><code class="language-cpp" data-lang="cpp"><span class="n">tail</span> <span class="n">of</span> <span class="n">array</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span> <span class="n">is</span> <span class="n">array</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span>

<span class="n">tail</span> <span class="n">of</span> <span class="n">array</span> <span class="p">[</span><span class="s">"a"</span><span class="p">,</span> <span class="s">"b"</span><span class="p">]</span> <span class="n">is</span> <span class="n">array</span> <span class="p">[</span><span class="s">"b"</span><span class="p">]</span>

<span class="n">tail</span> <span class="n">of</span> <span class="n">array</span> <span class="p">[</span><span class="s">"z"</span><span class="p">]</span> <span class="n">is</span> <span class="n">array</span> <span class="p">[]</span>

<span class="n">tail</span> <span class="n">of</span> <span class="n">array</span> <span class="p">[]</span> <span class="n">is</span> <span class="n">not</span> <span class="n">defined</span>

<span class="n">tail</span> <span class="n">of</span> <span class="n">non</span><span class="o">-</span><span class="n">array</span> <span class="n">is</span> <span class="n">not</span> <span class="n">defined</span></code></pre></figure>

<p><br />
It is important to note that the function <code class="language-plaintext highlighter-rouge">tail</code> returns a new array and keep the original array unchanged (no side-effect). In the functional programming style, it is the responsibility of the caller to verify that the input array is non-empty before calling the function tail. In this article, we will provide a vba implementation of this function.
<br /><br /></p>

<figure class="highlight"><pre><code class="language-vb" data-lang="vb"><span class="k">Function</span> <span class="nf">tail</span><span class="p">(</span><span class="n">xs</span> <span class="ow">As</span> <span class="kt">Variant</span><span class="p">)</span> <span class="ow">As</span> <span class="kt">Variant</span>

    <span class="k">Dim</span> <span class="nv">i</span> <span class="ow">As</span> <span class="kt">Long</span>
    <span class="k">Dim</span> <span class="nv">result</span><span class="p">()</span> <span class="ow">As</span> <span class="kt">Variant</span>
    <span class="n">result</span> <span class="o">=</span> <span class="n">Array</span><span class="p">()</span>
    <span class="k">For</span> <span class="n">i</span> <span class="o">=</span> <span class="p">(</span><span class="n">LBound</span><span class="p">(</span><span class="n">xs</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="k">To</span> <span class="n">UBound</span><span class="p">(</span><span class="n">xs</span><span class="p">)</span> <span class="k">Step</span> <span class="mi">1</span>
        <span class="k">ReDim</span> <span class="n">Preserve</span> <span class="n">result</span><span class="p">(</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
        <span class="n">result</span><span class="p">(</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">=</span> <span class="n">xs</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
    <span class="k">Next</span>
    <span class="n">tail</span> <span class="o">=</span> <span class="n">result</span>
    
<span class="k">End</span> <span class="k">Function</span></code></pre></figure>

<p><br />
Once this function is defined, you can call it in a vba code as below. As a reminder, the function tail will produce a run-time error if an empty or an uninitialized array is passed as its parameter. It is the responsibility of the caller to check its input before calling the function. A post will be written to cover this subject.
<br /><br /></p>

<figure class="highlight"><pre><code class="language-vb" data-lang="vb"><span class="k">Sub</span> <span class="nf">main</span><span class="p">()</span>

    <span class="k">Dim</span> <span class="nv">t</span> <span class="ow">As</span> <span class="kt">Variant</span>
    <span class="n">t</span> <span class="o">=</span> <span class="n">tail</span><span class="p">(</span><span class="n">Array</span><span class="p">(</span><span class="s">"a"</span><span class="p">,</span> <span class="s">"b"</span><span class="p">,</span> <span class="s">"c"</span><span class="p">))</span>
    <span class="n">MsgBox</span> <span class="n">t</span>

<span class="k">End</span> <span class="k">Sub</span></code></pre></figure>

<p><br />
In the future, we will rework this example to implement it over a more functional datastructure called <code class="language-plaintext highlighter-rouge">cons</code>. Thanks for reading. If you have any comments <a href="mailto:assad.navi@gmail.com">get in touch</a></p>]]></content><author><name></name></author><summary type="html"><![CDATA[In this article, we will look at our second tool that will help us solve problems in a recursive programming style. The function is called tail. The function takes an array as a parameter and returns a copy of it without its first element. The order of the elements is preserved. The function tail is defined only for non-empty arrays. See examples of its logic.]]></summary></entry><entry><title type="html">Function head() over a vba array</title><link href="http://localhost:4000/2023/05/29/function-head-over-a-vba-array.html" rel="alternate" type="text/html" title="Function head() over a vba array" /><published>2023-05-29T02:00:00+02:00</published><updated>2023-05-29T02:00:00+02:00</updated><id>http://localhost:4000/2023/05/29/function-head-over-a-vba-array</id><content type="html" xml:base="http://localhost:4000/2023/05/29/function-head-over-a-vba-array.html"><![CDATA[<p>One convenient way to solve a problem is to write recursive functions. The vba runtime environment allows use to write recursive functions but the tooling around (head, tail, cons, …) to process data recursively is not provided in the core language definition. In this blog, we are aiming to build the various missing functions needed to write vba code in a functional programming style. To do so, we will start building our first useful function, <code class="language-plaintext highlighter-rouge">head</code>. The function head has a different name depending on the programming language, as an example, it is called <code class="language-plaintext highlighter-rouge">car</code> in Scheme or Lisp. Its purpose is to return the first element of a list and it is defined only for non-empty lists. In this article, we are going to provide a vba implementation of the head function taking as a parameter an array. In the future, we will look at a more functional datastructure called cons instead of using arrays. See below its implementation.
<br /><br /></p>

<figure class="highlight"><pre><code class="language-vb" data-lang="vb"><span class="k">Function</span> <span class="nf">head</span><span class="p">(</span><span class="n">xs</span> <span class="ow">As</span> <span class="kt">Variant</span><span class="p">)</span> <span class="ow">As</span> <span class="kt">Variant</span>

    <span class="k">If</span> <span class="n">IsEmpty</span><span class="p">(</span><span class="n">xs</span><span class="p">)</span> <span class="k">Then</span>
        <span class="n">head</span> <span class="o">=</span> <span class="n">Empty</span>
    <span class="k">ElseIf</span> <span class="n">UBound</span><span class="p">(</span><span class="n">xs</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">LBound</span><span class="p">(</span><span class="n">xs</span><span class="p">)</span> <span class="k">Then</span>
        <span class="n">head</span> <span class="o">=</span> <span class="n">Empty</span>
    <span class="k">Else</span>
        <span class="n">head</span> <span class="o">=</span> <span class="n">xs</span><span class="p">(</span><span class="n">LBound</span><span class="p">(</span><span class="n">xs</span><span class="p">))</span>
    <span class="k">End</span> <span class="k">If</span>

<span class="k">End</span> <span class="k">Function</span></code></pre></figure>

<p><br />
The function takes an array (we keep the function generic by using the input and output type Variant) and returns the first item of its parameter. We assume here that the data is a valid array. In scenarios where the input array is not inititalized or empty, the function returns the value Empty. Why returning Empty ? In vba, Empty is used to define a non-value compared to Null which defines a non-valid value. An error could also have been returned but this makes the use of the function more difficult. See below how the function head can be used in a vba code.
<br /><br /></p>

<figure class="highlight"><pre><code class="language-vb" data-lang="vb"><span class="k">Sub</span> <span class="nf">main</span><span class="p">()</span>

    <span class="k">Dim</span> <span class="nv">h</span> <span class="ow">As</span> <span class="kt">Variant</span>
    <span class="n">h</span> <span class="o">=</span> <span class="n">head</span><span class="p">(</span> <span class="n">Array</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span> <span class="p">)</span>

    <span class="k">If</span> <span class="k">Not</span> <span class="n">IsEmpty</span><span class="p">(</span><span class="n">h</span><span class="p">)</span> <span class="k">Then</span>
        <span class="c1">' ...</span>
    <span class="k">End</span> <span class="k">If</span>

<span class="k">End</span> <span class="k">Sub</span></code></pre></figure>

<p><br />
Thanks for reading. If you have any comments <a href="mailto:assad.navi@gmail.com">get in touch</a></p>]]></content><author><name></name></author><summary type="html"><![CDATA[One convenient way to solve a problem is to write recursive functions. The vba runtime environment allows use to write recursive functions but the tooling around (head, tail, cons, …) to process data recursively is not provided in the core language definition. In this blog, we are aiming to build the various missing functions needed to write vba code in a functional programming style. To do so, we will start building our first useful function, head. The function head has a different name depending on the programming language, as an example, it is called car in Scheme or Lisp. Its purpose is to return the first element of a list and it is defined only for non-empty lists. In this article, we are going to provide a vba implementation of the head function taking as a parameter an array. In the future, we will look at a more functional datastructure called cons instead of using arrays. See below its implementation. Function head(xs As Variant) As Variant]]></summary></entry></feed>